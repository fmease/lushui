;;; parameter group syntax (over-engineered imo), current syntax
;;; in most cases used for parameters of type 'Type
;;; it's not recommended to use them for types /= 'Type (API smell)
;;; most of the type a param group is of size 1, implementation needs to
;;; allocate more space nonetheless

'data Tuple (A B: 'Type): 'Type =
    Tuple' {A B: 'Type}: A -> B -> Tuple A B

'let constant {A B: 'Type} (a: A) ('_: B): A = a

;;; no group syntax, very verbose


'data Tuple (A: 'Type) (B: 'Type): 'Type =
    Tuple' {A: 'Type} {B: 'Type}: A -> B -> Tuple A B

;;; or

'data Tuple: 'Type -> 'Type -> 'Type =
    Tuple': {A: 'Type} -> {B: 'Type} -> A -> B -> Tuple A B

'let constant {A: 'Type} {B: 'Type} (a: A) ('_: B): A = a

;;; no group syntax, defaulting to 'Type in "explicitly annotated parameters"
;;; dislike: special case, leads to the question where else to add special cases, e.g.
;;; the final type annotation of 'data is always 'Type, so should it be `'data Tuple A B =`
;;; leave off signatures of constructors as well?? or if the argument is of type
;;; 'Type -> 'Type ?? b.c. it "could be infered"

'data Tuple A B: 'Type =
    Tuple' {A} {B}: A -> B -> Tuple A B

'let constant {A} {B} (a: A) ('_: B): A = a

;; like this? :/

'data Tuple A B =
    Tuple' {A} {B}: A -> B -> Tuple A B

;;; Ocamlish (with "infered" instance type):

'data Tuple A B =
    Tuple' {A} {B} (first: A) (second: B)
