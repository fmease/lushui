;; Types and functions related to comparing and ordering.
module

@public
data Ordering: Type of
    less: Ordering
    equal: Ordering
    greater: Ordering

@public
use Ordering.(less equal greater)

@public
invert (o: Ordering): Ordering =
    case o of
        less => greater
        equal => equal
        greater => less

use capsule.unit.(unit Unit Thunk (force as !))
use capsule.int.Int

@public
then (o: Ordering) (lazy p: Thunk Ordering): Ordering =
    case o of
        equal => ! Ordering p
        \o => o

@public
then_ (o: Ordering) (p: Ordering): Ordering =
    case o of
        equal => p
        \o => o

@public
to-int (o: Ordering): Int =
    case o of
        less => @Int -1
        equal => @Int 0
        greater => @Int 1

