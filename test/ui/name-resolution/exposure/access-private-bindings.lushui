use extern.core.type.Type

use S.structure as s

use outer.(south.Structure as S, north.Structure as N)
use outer.south

module outer of

    It: topmost.Type = north.Structure

    @public
    module north of
        data Structure: topmost.Type of
            structure: Structure

    module south of
        data Structure: topmost.Type of


Struct: Type = outer.south

;;; [Description]
;;; Bindings not marked `@public` should be considered private to the module the binding is defined in.
;;; Irrespective of whether it is accessed by `use` or inside of an expression.
;;; Furthermore, processing use-declarations that break exposure rules should not lead to a
;;; fatal error but allow the name resolver to keep resolving and checking.
;;; Lastly, this test case exercises the exposure checker with out of order bindings.
