# TEST pass check
# TEST compiler-args -Zparse-only
# FIXME: Turn this into an actual test somehow maybe.

use extern.core.type.Type

False =
    For P -> P

negate Phi = Phi -> False
power S = S -> Type

U =
    For X ->
    (power (power X) -> X) ->
    power (power X)

tau
    (t: power (power U))
    X
    (f: power (power X) -> X)
    (p: power X): _
    =
    t (for (x: U) => p (f (x X f)))

sigma (s: U): _ =
    s U (for (t: power (power U)) => tau t)

Delta (y: U) =
    negate (For (p: power U) -> sigma y p -> p (tau (sigma y)))
Omega =
    tau (for (p: power U) => For (x: U) -> sigma x p -> p x)

main: _ =
    (for (zero: For (p: power U) -> (For (x: U) -> sigma x p -> p x) -> p Omega) =>
        (zero Delta (for (x: U) (two: sigma x Delta) (three: For (p: power U) -> sigma x p -> p (tau (sigma x))) =>
            three Delta two (for (p: power U) => three (for (y: U) => p (tau (sigma y))))))(for (p: power U) => zero (for (y: U) =>
                p (tau (sigma y)))))(for (p: power U) (one: For (x: U) -> sigma x p -> p x) => one Omega (for (x: U) => one (tau (sigma x))))

