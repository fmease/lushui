;;; TEST pass check

Alpha: Type = Alpha

module realm of
    Alpha: super.Beta = topmost.Alpha

    module local of
        use super.Alpha as A0
        use topmost.realm.Alpha as A1
        use topmost.Alpha as A2
        use self as lokal
        use topmost.parallel-realm

module parallel-realm of
    use super.Unit.unit

@(public self)
Beta: Type = Type

data Unit: Type of
    unit: Unit

;;; [Description]
;;; Privacy is only one-way: Descendant modules or namespaces
;;; are in all cases permitted to refer to and use-bindings defined in
;;; parent/ancestor modules (unless such a binding breaks exposure rules to begin with)
;;; no matter their declared exposure reach (which is directed upwards).
;;; This should work for both use-declarations and inside expressions.
;;; Out of order declarations should not hinder the algorithm.
