@inherent
data Bool: Type =
    false: Bool
    true: Bool

use Bool.(false true)

not (b: Bool): Bool =
    case b of
        false => true
        true => false

use super.unit.(Unit Thunk (force as !))

if (A: Type) (condition: Bool) (lazy consequent alternate: Thunk A): A =
    case condition of
        false => ! A alternate
        true => ! A consequent

;; @Question or `&&`?
use and as &

and (b: Bool) (lazy c: Thunk Bool): Bool = if Bool b (! Bool c) false

;; @Question or `||`?
use or as |

or (b: Bool) (lazy c: Thunk Bool): Bool = if Bool b true (! Bool c)

