use super.(option.Option bool.Bool text.Text)

@public @foreign
data Nat: Type

@public
use add as +

@public @foreign
add: Nat -> Nat -> Nat

@public
use subtract as -

@public @foreign
subtract: Nat -> Nat -> Option Nat

@public
use panicking-subtract as -?

;; @Temporary
@public @foreign
panicking-subtract: Nat -> Nat -> Nat

@public
use multiply as *

@public @foreign
multiply: Nat -> Nat -> Nat

@public
use divide as /

@public @foreign
divide: Nat -> Nat -> Option Nat

@public
use equal as ==

@public @foreign
equal: Nat -> Nat -> Bool

;; equal (n m: Nat): Bool =
;;     case duple Nat Nat n m of
;;         duple Nat Nat \n n => true
;;         \_ => false

@public
use less as <

@public @foreign
less: Nat -> Nat -> Bool

@public
use less-equal as =<

@public @foreign
less-equal: Nat -> Nat -> Bool

@public
use greater as >

@public @foreign
greater: Nat -> Nat -> Bool

@public
use greater-equal as >=

@public @foreign
greater-equal: Nat -> Nat -> Bool

@public @foreign
display: Nat -> Text

@public
use super.(bool ordering)

@public
compare (n m: Nat): ordering.Ordering =
    case equal n m of
        bool.true => ordering.equal
        bool.false => case less n m of
            bool.true => ordering.less
            bool.false => ordering.greater

;; @public @foreign
;; to-int: Nat -> Nat -> core.int.Int
