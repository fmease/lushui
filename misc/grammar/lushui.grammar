; The grammar of the Lushui programming language.
;
; Terminals are not plain text but lexems that is tokens outputted by the lexer.
; This document is written in an EBNF flavor and
; generated from the documentation comments of the parser. Therefore, do not edit this file directly.
;
; | Notation  | Name                                | Definition or Remarks                                         |
; |-----------|-------------------------------------|---------------------------------------------------------------|
; | `; C`     | Comment                             | Stretches until the end of the line                           |
; | `N ::= R` | Definition                          | Defines non-terminal `A` by rule `R`                          |
; | `A B`     | Sequence                            | Rule `B` immediately followed by rule `A` modulo lexed tokens |
; | `(A)`     | Grouping                            | To escape default precedence                                  |
; | `A | B`   | Ordered Alternative                 | Either `A` or `B` first trying `A` then `B`                   |
; | `A?`      | Option                              | `A` or nothing (&epsilon;)                                    |
; | `A*`      | Kleene Star (Multiplicity)          | Arbitrarily long sequence of `A`s                             |
; | `A+`      | Kleene Plus (Positive Multiplicity) | Arbitrarily long non-empty sequence of `A`s                   |
; | `"T"`     | Terminal                            | Lexed token by textual content                                |
; | `#T`      | Named Terminal                      | Lexed token by name                                           |
; | `!A`      | Associativity                       | To the left of `::=`                                          |
; | `<!A`     | Negative Look-Behind                |                                                               |

General-Identifier ::= #Identifier | #Punctuation

Declaration ::= Attributes Naked-Declaration
Naked-Declaration ::=
    | Value-Declaration
    | Data-Declaration
    | Module-Declaration
    | Crate-Declaration
    | Use-Declaration
Crate-Declaration ::= "crate" #Identifier Line-Break

Attributes ::= ((Attribute | Documentation-Comment) Line-Break)*

Attribute ::= "@" (#Identifier | "(" #Identifier Attribute-Argument* ")")
Attribute-Argument ::= Simple-Attribute-Argument | "(" #Identifier Simple-Attribute-Argument ")"
Simple-Attribute-Argument ::= #Number-Literal | #Text-Literal | #Identifier

Value-Declaration ::= #Identifier Parameters Type-Annotation?
    ("=" Possibly-Indented-Terminated-Expression | Line-Break)

Data-Declaration ::= "data" #Identifier Parameters Type-Annotation?
    (Line-Break |
    "=" Line-Break Indentation
        (Line-Break | Constructor)*
    Dedentation)

Module-Declaration ::= Header | "module" #Identifier
    (Line-Break |
    ":" Exposure-List Line-Break Indentation
        (Line-Break | Declaration)*
    Dedentation)
Header ::= "module" ":" Exposure-List Line-Break

Top-Level ::= (Line-Break | Declaration)* #End-Of-Input

Exposure-List ::= General-Identifier* "="

Use-Declaration ::= "use" Use-Bindings Line-Break

Path-Tree ::=
    Path-Head
    ("." General-Identifier)*
    (General-Identifier | "(" (Renaming | Path-Tree)* ")")
Renaming ::= "(" Path "as" General-Identifier ")"

Constructor ::= (Attribute | Documentation-Comment)*
    #Identifier Parameters Type-Annotation? Line-Break

Expression ::= Pi-Literal-Or-Lower

Pi-Literal-Or-Lower !right ::= (
    "(" Explicitness #Identifier Type-Annotation ")" |
    Application-Or-Lower)
        ("->" Pi-Literal-Or-Lower)*

Application-Or-Lower !left ::=
    Lower-Expression
    (Lower-Expression | "(" Explicitness (#Identifier "=")? Expression ")")*

Lower-Expression ::= Attributes Naked-Lower-Expression
Naked-Lower-Expression ::=
    | Path
    | "Type"
    | #Number-Literal
    | #Text-Literal
    | Typed-Hole
    | Let-In
    | Use-In
    | Lambda-Literal
    | Case-Analysis
    | Do-Block
    | Sequence-Literal
    | "(" Expression ")"
Typed-Hole ::= "?" #Identifier
Sequence-Literal ::= "[" Lower-Expression* "]"

Path ::= Path-Head? ("." General-Identifier)*
Path-Head ::= "crate" | "super" | General-Identifier

Lambda-Literal ::= "\" Parameters Type-Annotation? "=>" Expression

Let-In ::=
    "let" #Identifier Parameters Type_Annotation? "="
    Possibly-Breakably-Indented-Expression "in" Line-Break? Expression

Use-In ::= "use" Path-Tree "in" Line-Break? Expression

Case-Analysis ::= "case" Possibly-Breakably-Indented-Expression "of"
    (Line-Break (Indentation Case* Dedentation)?)?
Case ::= Pattern "=>" Expression

Do-Block ::= "do" Line-Break Indentation Statement+ Dedentation
Statement ::= Let-Statement | Use-Declaration | Bind-Statement | Expression-Statement
Let-Statement ::= "let" Value-Declaration
Bind-Statement ::= #Identifier Type-Annotation? "<-" Expression Line-Break
Expression-Statement ::= Expression Line-Break

Parameters ::= Parameter-Group*

Parameter-Group ::= #Identifier | "(" Explicitness #Identifier+ Type-Annotation? ")"

Pattern !left ::=
    Lower-Pattern
    (Lower-Pattern | "(" Explicitness (#Identifier =)? Pattern ")")*

Lower-Pattern ::=
    | Path
    | #Number-Literal
    | #Text-Literal
    | Binder
    | Sequence-Literal-Pattern
    | "(" Pattern ")"
Binder ::= "\" #Identifier
Sequence-Literal-Pattern ::= "[" Lower-Pattern* "]"

Type-Annotation ::= ":" Expression

Possibly-Indented-Terminated-Expression ::=
    | Line-Break Indentation Expression Line-Break? Dedentation
    | Terminated-Expression

Possibly-Breakably-Indented-Expression ::=
    | Line-Break Indentation Expression (Line-Break Dedentation)?
    | Expression

Terminated-Expression ::= Expression (<!Dedentation Line-Break)?

Explicitness ::= ","?

