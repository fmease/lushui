; The grammar of the Lushui programming language.
;
; Terminals are not plain text but lexems, those are tokens outputted by the lexer.
; This document is written in an EBNF flavor and
; generated from the documentation comments of the parser. Therefore, do not edit this file directly.
;
; | Notation  | Name                                | Definition or Remark                                          |
; |-----------|-------------------------------------|---------------------------------------------------------------|
; | `; C`     | Comment                             | Stretches until the end of the line                           |
; | `N ::= R` | Definition                          | Defines non-terminal `A` by rule `R`                          |
; | `A B`     | Sequence                            | Rule `B` immediately followed by rule `A` modulo lexed tokens |
; | `(A)`     | Grouping                            | To escape default precedence                                  |
; | `A | B`   | Ordered Alternative                 | Either `A` or `B` first trying `A` then `B`                   |
; | `A?`      | Option                              | `A` or nothing (Îµ)                                            |
; | `A*`      | Kleene Star (Multiplicity)          | Arbitrarily long sequence of `A`s                             |
; | `A+`      | Kleene Plus (Positive Multiplicity) | Arbitrarily long non-empty sequence of `A`s                   |
; | `"T"`     | Terminal                            | Lexed token by textual content                                |
; | `#T`      | Named Terminal                      | Lexed token by name                                           |
; | `(> A)`   | Positive Look-Ahead                 |                                                               |
; | `(< A)`   | Positive Look-Behind                |                                                               |

Identifier ::= #Word | #Punctuation

Declaration ::= (Attribute #Line-Break*)* Bare-Declaration
Bare-Declaration ::=
    | Function-Declaration
    | Data-Declaration
    | Module-Declaration
    | Use-Declaration

Attribute ::= Regular-Attribute | Documentation-Comment

Regular-Attribute ::= "@" (#Word | "(" #Word Attribute-Argument* ")")

Attribute-Argument ::= Lower-Attribute-Argument | "(" #Word Lower-Attribute-Argument ")"
Lower-Attribute-Argument ::= Path | #Number-Literal | #Text-Literal

Function-Declaration ::=
    #Word
    Parameters Type-Annotation?
    ("=" Expression)?
    Terminator

Data-Declaration ::=
    "data" #Word
    Parameters Type-Annotation?
    ("of" ("{" (Terminator | Constructor)* "}")?)?
    Terminator

Module-Declaration ::=
    | Header
    | "module" #Word ("of" ("{" (Terminator | Declaration)* "}")?)? Terminator
Header ::= "module" Terminator

Top-Level ::= (#Line-Break | Declaration)* #End-Of-Input

Use-Declaration ::= "use" Use-Path-Tree Terminator

Use-Path-Tree ::=
    | Path
    | Path "." "(" (Use-Path-Tree | "(" Renaming ")")* ")"
    | Renaming
Renaming ::= Path "as" Identifier

Constructor ::=
    (Attribute #Line-Break*)*
    #Word Parameters Type-Annotation?
    ("=" Expression)?
    Terminator

Expression ::= Pi-Type-Literal-Or-Lower

; among other things, the grammar for pretty-printers differs from the one for parsers
; in that `Pi-Type-Literal-Or-Lower` also includes several complex (in the sense that they
; contain further expressions) `Lower-Expression`s namely let/in, use/in, lambda literals,
; case analyses and do blocks (not sure about sequence literals)
Pi-Type-Literal-Or-Lower ::=
    (Designated-Pi-Type-Domain | Application-Or-Lower)
    "->" Pi-Type-Literal-Or-Lower
Designated-Pi-Type-Domain ::= Explicitness "(" "lazy"? #Word Type-Annotation ")"

Application-Or-Lower ::= Lower-Expression Argument*
Argument ::=
    | Explicitness Lower-Expression
    | Explicitness "(" (#Word "=")? Expression ")"

; ; left-recursive version unsuitable for the recursive descent parser
; ; but indeed usable for pretty-printers:
;
; Application-Or-Lower ::= Application-Or-Lower? Argument*
; Argument ::=
;     | Lower-Expression
;     | Explicitness "(" (#Word "=")? Expression ")"

Lower-Expression ::= Attribute* Bare-Lower-Expression
Bare-Lower-Expression ::= Lowest-Expression ("::" Identifier)*
Lowest-Expression ::=
    | Path
    | "Type"
    | #Number-Literal
    | #Text-Literal
    | Typed-Hole
    | Let-In
    | Use-In
    | Lambda-Literal
    | Case-Analysis
    | Do-Block
    | Sequence-Literal
    | "(" Expression ")"
Typed-Hole ::= "?" #Word
Sequence-Literal ::= "[" Lower-Expression* "]"

Path ::= Path-Head ("." Identifier)*
Path-Head ::= Path-Hanger | Identifier
Path-Hanger ::= "extern" | "capsule" | "super" | "self"

Lambda-Literal ::= "\" Parameters Type-Annotation? "=>" Expression

Let-In ::=
    "let" #Word Parameters Type-Annotation?
    ("=" Expression)?
    #Virtual-Semicolon?
    "in" Expression

Use-In ::=
    "use" Use-Path-Tree
    #Virtual-Semicolon?
    "in" Expression

Case-Analysis ::= "case" Expression "of" ("{" Case* "}")?
Case ::= Pattern "=>" Expression Terminator

Do-Block ::= "do" "{" Statement* "}"
Statement ::= Let-Statement | Use-Declaration | Bind-Statement | Expression-Statement
Let-Statement ::= "let" Function-Declaration
Bind-Statement ::= #Word Type-Annotation? "<-" Expression Terminator
Expression-Statement ::= Expression Terminator

Parameters ::= Parameter*

Parameter ::= Explicitness Bare-Parameter
Bare-Parameter ::= #Word | "(" "lazy"? #Word Type-Annotation? ")"

Pattern ::= Lower-Pattern Pattern-Argument*
Pattern-Argument ::=
    | Explicitness Lower-Pattern
    | Explicitness "(" (#Word "=")? Pattern ")"

Lower-Pattern ::= Attribute* Bare-Lower-Pattern
Bare-Lower-Pattern ::=
    | Path
    | #Number-Literal
    | #Text-Literal
    | Binder
    | Sequence-Literal-Pattern
    | "(" Pattern ")"
Binder ::= "\" #Word
Sequence-Literal-Pattern ::= "[" Lower-Pattern* "]"

Type-Annotation ::= ":" Expression

; #Start-Of-Input is not actually emitted by the lexer, the parser needs to bound-check instead.
Terminator ::= ";" | (> "}" | #End-Of-Input) | (< #Start-Of-Input | ";" | "}")

Explicitness ::= "'"?

