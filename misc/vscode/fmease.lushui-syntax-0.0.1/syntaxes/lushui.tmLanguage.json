{
    "scopeName": "source.lushui",
    "name": "lushui",
    "patterns": [
        {
            "include": "#comment"
        },
        {
            "include": "#attribute"
        },
        {
            "include": "#entity"
        },
        {
            "include": "#keyword"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#number-literal"
        },
        {
            "include": "#text-literal"
        }
    ],
    "repository": {
        "comment": {
            "patterns": [
                {
                    "name": "comment.line.double-semicolon.lushui",
                    "match": ";;.*"
                },
                {
                    "__comment__": "Also works: ;(?!;).*",
                    "name": "comment.block.documentation.lushui",
                    "match": ";.*"
                }
            ]
        },
        "keyword": {
            "patterns": [
                {
                    "match": "\\b(in|of|super|crate)\\b",
                    "name": "keyword.other.lushui"
                },
                {
                    "match": "\\b(data|use|module|let)\\b",
                    "name": "storage.modifier.lushui"
                },
                {
                    "match": "\\bas\\b",
                    "name": "keyword.operator.lushui"
                },
                {
                    "match": "\\bcase\\b",
                    "name": "keyword.control.lushui"
                },
                {
                    "match": "\\bType\\b",
                    "name": "storage.type.lushui"
                },
                {
                    "__comment__": "Maybe assert that round bracket preceeds the comma with (?<=\\(\\s*)",
                    "match": "\\|",
                    "name": "storage.modifier.lushui"
                },
                {
                    "match": "[\\.:+~=<>*^!?|/\\\\&#%$@]|(?<![a-z-A-Z0-9'])-(?![a-z-A-Z])",
                    "name": "keyword.operator.lushui"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "match": "\\(",
                    "name": "punctuation.grouping.begin.bracket.round.lushui"
                },
                {
                    "match": "\\)",
                    "name": "punctuation.grouping.end.bracket.round.lushui"
                }
            ]
        },
        "number-literal": {
            "patterns": [
                {
                    "name": "constant.numeric.integer.decimal.lushui",
                    "match": "\\b[0-9]([0-9]|'[0-9])*\\b"
                }
            ]
        },
        "text-literal": {
            "patterns": [
                {
                    "name": "string.quoted.double.lushui",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "include": "#escape_sequence"
                        }
                    ]
                }
            ]
        },
        "escape_sequence": {
            "__comment__": "@Task verify",
            "name": "constant.character.escape.lushui",
            "match": "\\\\(u[0-9a-f]{4}|U[0-9a-f]{6}|\\\\|\")"
        },
        "entity": {
            "patterns": [
                {
                    "__comment__": "Note that we can add a patterns field containing includes. What effect does it have though?",
                    "match": "\\b((?:[a-zA-Z][a-zA-Z0-9]*'*)(?:-[a-zA-Z][a-zA-Z0-9]*'*)*)\\s*:",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.lushui"
                        }
                    }
                }
            ]
        },
        "attribute": {
            "patterns": [
                {
                    "match": "(?:^| {4})@:?(?:\\w+|\\(.+?\\))",
                    "name": "meta.attribute.lushui punctuation.definition.variable"
                }
            ]
        }
    }
}
