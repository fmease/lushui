; The grammar of the Lushui programming language.
;
; Terminals are not plain text but lexemes, those are tokens outputted by the lexer.
; This document is written in an EBNF flavor and
; generated from the documentation comments of the parser. Therefore, do not edit this file directly.
;
; | Notation  | Name                                | Definition or Remark                                          |
; |-----------|-------------------------------------|---------------------------------------------------------------|
; | `; C`     | Comment                             | Stretches until the end of the line                           |
; | `N ::= R` | Definition                          | Defines non-terminal `A` by rule `R`                          |
; | `A B`     | Sequence                            | Rule `B` immediately followed by rule `A` modulo lexed tokens |
; | `(A)`     | Grouping                            | To escape default precedence                                  |
; | `A | B`   | Ordered Alternative                 | Either `A` or `B` first trying `A` then `B`                   |
; | `A?`      | Option                              | `A` or nothing (ε)                                            |
; | `A*`      | Kleene Star (Multiplicity)          | Arbitrarily long sequence of `A`s                             |
; | `A+`      | Kleene Plus (Positive Multiplicity) | Arbitrarily long non-empty sequence of `A`s                   |
; | `"T"`     | Terminal                            | Lexed token by textual content                                |
; | `#T`      | Named Terminal                      | Lexed token by name                                           |
; | `(> A)`   | Positive Look-Ahead                 | Bounded                                                       |
; | `(< A)`   | Positive Look-Behind                | Bounded                                                       |
; | `⟪M⟫`     | Metavariable                        | Draws from a finite domain                                    |
; | `⟪⟪ L ⟫⟫` | Metalanguage expression             | Mirrors the object language                                   |

Use-Path-Tree ::=
    | Path
    | Path "." "(" (Use-Path-Tree ",")* ")"
    | Path "as" Identifier

Path ::= Path-Head ("." Identifier)*

Path-Head ::= Path-Hanger | Identifier
Path-Hanger ::= "extern" | "topmost" | "super" | "self"

Parameters ::= Parameter*
Parameter ::=
    | "'"? Local-Binder
    | "'"? (Local-Binder Type-Annotation? ")"
    | "[" (Local-Binder ":")? Expression "]"

Sequence-Literal-Or-Bracketed-⟪Item⟫ ::= (Path ".")? "(" (⟪Item⟫ ",")* ")"

Record-Literal-⟪Item⟫ ::=
    "{"
    ; @Task generalize #Word to "paths" (i.e. identifiers with "." OR "::" seps!)
    (#Word ("=" ⟪Item⟫)? ",")* ; @Task make trailing comma optional & don't allow it if ";" follows
    (";" ⟪Item⟫)?
    "}"

Application-⟪Item⟫-Or-Lower ::= Lower-⟪Item⟫ ⟪Item⟫-Argument*
⟪Item⟫-Argument ::=
    "'"?
    (Lower-⟪Item⟫ | "(" (#Word "=")? ⟪Item⟫ ")")

Path-Or-Namespaced-⟪Item⟫-Literal ::= Path ("." ⟪Item⟫-Literal)?
⟪Item⟫-Literal ::=
    | #Number-Literal
    | #Text-Literal
    | Sequence-Literal-⟪Item⟫
    | Record-Literal-⟪Item⟫

Type-Annotation ::= ":" Expression

Attribute ::= Regular-Attribute | #Documentation-Comment

Regular-Attribute ::= "@" (#Word | "(" #Word Attribute-Argument* ")")

Attribute-Argument ::= Lower-Attribute-Argument | "(" #Word Lower-Attribute-Argument ")"
Lower-Attribute-Argument ::= Path | #Number-Literal | #Text-Literal

Identifier ::= #Word | #Symbol

Local-Binder ::= #Word | "_"

; #Start-Of-Input is not actually emitted by the lexer, the parser needs to bound-check instead.
;
Terminator ::= #Line-Break
    | (> #Dedentation | #End-Of-Input)
    | (< #Start-Of-Input | #Line-Break | #Dedentation)

Wildcard ::= Silent-Wildcard | Signaling-Wildcard
Silent-Wildcard ::= "_"
Signaling-Wildcard ::= "?" #Word

⟪⟪ Item ::= "Expression" | "Pattern" ⟫⟫

Top-Level ::= (#Line-Break | Declaration)* #End-Of-Input

Declaration ::= (Attribute #Line-Break*)* Bare-Declaration
Bare-Declaration ::=
    | Function-Declaration
    | Data-Declaration
    | Module-Declaration
    | Use-Declaration
    | Given-Declaration

Function-Declaration ::=
    #Word
    Parameters Type-Annotation?
    ("=" Expression)?
    Terminator

Data-Declaration ::=
    Data-Kind
    #Word
    Parameters Type-Annotation?
    ("of" (#Indentation (Terminator | Declaration)* #Dedentation)?)?
    Terminator
Data-Kind ::= "data" | "record" | "trait"

Module-Declaration ::=
    | Module-Header
    | "module" #Word ("of" (#Indentation (Terminator | Declaration)* #Dedentation)?)? Terminator
Module-Header ::= "module" Terminator

Use-Declaration ::= "use" Use-Path-Tree Terminator

Given-Declaration ::=
    "given"
    #Word
    Parameters Type-Annotation?
    Given-Body?
    Terminator
Given-Body ::=
    | "of" (#Indentation (Terminator | Declaration)* #Dedentation)?
    | "=" Expression

Expression ::= Shorthand-Quantified-Type-Or-Lower

; Among other things, the grammar for pretty printers differs from the one for parsers
; in that `Shorthand-Quantified-Type-Or-Lower` also includes several complex (in the sense of
; containing further expressions) `Lower-Expression`s namely let- and use-bindings, lambda literals,
; case analyses and do blocks.
;
Shorthand-Quantified-Type-Or-Lower ::=
    Application-Expression-Or-Lower
    Quantifier
    Shorthand-Quantified-Type-Or-Lower
Quantifier ::= "->" | "**"

Application-Expression-Or-Lower ::= Lower-Expression Expression-Argument*
Expression-Argument ::=
    "'"?
    (Lower-Expression | "(" (#Word "=")? Expression ")")

; ; The left-recursive version of the rule above is unsuitable for a recursive descent parser.
; ; However, it is usable for pretty printers.
;
; Application-Expression-Or-Lower ::= Application-Expression-Or-Lower? Expression-Argument*
; Expression-Argument ::=
;     | Lower-Expression
;     | "'"? "(" (#Word "=")? Expression ")"

Lower-Expression ::= Attribute* Bare-Lower-Expression
Bare-Lower-Expression ::= Lowest-Expression ("::" Identifier)*
Lowest-Expression ::=
    | Wildcard
    | #Number-Literal
    | #Text-Literal
    | Let-Binding
    | Use-Binding
    | Lambda-Literal
    | Case-Analysis
    | Do-Block
    | Quantified-Type
    | Sequence-Literal-Or-Bracketed-Expression
    | Record-Literal-Expression
    | Path-Or-Namespaced-Expression-Literal

Lambda-Literal ::= "for" Parameters Type-Annotation? "=>" Expression

Quantified-Type ::= "For" Parameter* Quantifier Expression

Let-Binding ::=
    "let" Local-Binder Parameters Type-Annotation?
    ("=" Expression)?
    #Line-Break?
    "in" Expression

Use-Binding ::=
    "use" Use-Path-Tree
    #Line-Break?
    "in" Expression

Case-Analysis ::= "case" Expression "of" (#Indentation Case* #Dedentation)?
Case ::= Pattern "=>" Expression Terminator

Do-Block ::= "do" #Indentation Statement* #Dedentation
Statement ::= Let-Statement | Use-Declaration | Expression-Statement
Let-Statement ::=
    "let" Local-Binder Parameter* Type-Annotation?
    Binding-Mode
    Expression Terminator
Expression-Statement ::= Expression Terminator
Binding-Mode ::=  "=" | "<-"

Pattern ::=
    | Binder
    | Lower-Pattern Pattern-Argument*
Binder ::= "let" Local-Binder
Pattern-Argument ::=
    "'"?
    (Lower-Pattern | "(" (#Word "=")? Pattern ")")

Lower-Pattern ::= Attribute* Bare-Lower-Pattern
Bare-Lower-Pattern ::=
    | Wildcard
    | #Number-Literal
    | #Text-Literal
    | Sequence-Literal-Or-Bracketed-Pattern
    | Record-Literal-Pattern
    | Path-Or-Namespaced-Pattern-Literal

