name: CI

on:
  push:
    branches: [ master ]
  pull_request:
  schedule:
    [cron: "0 0 1 * *"]

# Do not set ‘RUSTFLAGS’ or ‘RUSTDOCFLAGS’ anywhere in here! It would overwrite the flags set
# in ‘.cargo/config.toml’! Instead, make use of the Cargo profile ‘ci’ defined in the mentioned
# config file whose registered Rust flags are *appended* to the parent profile's ones.
env:
  CARGO_TERM_COLOR: always
  RUSTUP_TOOLCHAIN: nightly

# @Task add back dependency caching once we've figured out how to do it properly
#       (before: always cache misses)

jobs:
  build-on-linux:
    name: Build on (Ubuntu) Linux

    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3
    - name: Install Rust
      run: rustup update --no-self-update nightly
    - name: Build in release mode
      # @Task build with LLVM
      run: cargo build --profile ci --features cranelift,lsp

  build-on-windows:
    name: Build on Windows

    # disabled to reduce resource usage and since it's not as important right now
    if: false

    runs-on: windows-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3
    - name: Install Rust
      run: rustup update --no-self-update nightly
    - name: Build in release mode
      # @Task build with LLVM
      run: cargo build --profile ci --features cranelift,lsp

  test-on-linux:
    name: Run tests on (Ubuntu) Linux

    needs: build-on-linux
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3
    - name: Install Rust
      run: rustup update --no-self-update nightly
    - name: Run unit tests
      # @Task test with LLVM
      run: cargo test --workspace --exclude llvm_codegen --features cranelift,lsp
    - name: Run UI tests
      # @Task test with LLVM and Cranelift
      run: ./test/ui/run --release --timeout=20

  test-on-windows:
    name: Run tests on Windows

    # disabled to reduce resource usage and since it's not as important right now
    if: false

    needs: build-on-windows
    runs-on: windows-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3
    - name: Install Rust
      run: rustup update --no-self-update nightly
    - name: Run unit tests
      # @Task test with LLVM
      run: cargo test --workspace --exclude llvm_codegen --features cranelift,lsp
    - name: Run UI tests
      # @Task build with LLVM and Cranelift
      run: ./tests/ui/run --release --timeout=20

  build-documentation:
    name: Build documentation (on Linux)

    needs: build-on-linux
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Install Rust
        run: rustup update --no-self-update nightly
      - name: Build documentation with rustdoc
        # @Task document with LLVM
        run: cargo doc --profile ci --no-deps --features cranelift,lsp

  clippy:
    name: Run Clippy (on Linux)

    needs: build-on-linux
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3
    - name: Install Rust
      run: |
        rustup update --no-self-update nightly
        rustup component add clippy
    - name: Run Clippy
      # @Task check with LLVM
      run: cargo clippy --profile ci --features cranelift,lsp

  formatting:
    name: Check code formatting

    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3
    - name: Install Rust
      run: |
        rustup update --no-self-update nightly
        rustup component add rustfmt
    - name: Check code formatting
      run: cargo fmt --all --check
