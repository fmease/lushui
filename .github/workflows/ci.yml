name: CI

on:
  push:
    branches: [ master ]
  pull_request:
  schedule:
    [cron: "0 0 1 * *"]

# Do not set ‘RUSTFLAGS’ or ‘RUSTDOCFLAGS’ anywhere in here! It would overwrite the flags set
# in ‘.cargo/config.toml’! Instead, make use of the Cargo profile ‘ci’ defined in the mentioned
# config file whose registered Rust flags are *appended* to the parent profile's ones.
env:
  CARGO_TERM_COLOR: always

jobs:
  build-on-linux:
    name: Build on Linux (Ubuntu)

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly
    - name: Build in release mode
      # @Task build with LLVM
      run: cargo build --profile ci --features cranelift,lsp

  build-on-windows:
    name: Build on Windows

    # disabled to reduce resource usage and since it's not as important right now
    if: false

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly
    - name: Build in release mode
      # @Task build with LLVM
      run: cargo build --profile ci --features cranelift,lsp

  test-on-linux:
    name: Run tests on Linux (Ubuntu)

    needs: build-on-linux
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly
    - name: Run unit tests (via the rust testing framework)
      run: cargo test
    - name: Run UI tests (via the golden UI testing framework)
      # @Task build with LLVM and Cranelift
      run: ./test/ui/run --release --timeout=20

  test-on-windows:
    name: Run tests on Windows

    # disabled to reduce resource usage and since it's not as important right now
    if: false

    needs: build-on-windows
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly
    - name: Run unit tests (via the rust testing framework)
      run: cargo test
    - name: Run UI tests (via the golden UI testing framework)
      # @Task build with LLVM and Cranelift
      run: ./tests/ui/run --release --timeout=20

  build-documentation:
    name: Build Documentation (on Linux)

    needs: build-on-linux
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
      - name: Build documentation with rustdoc excluding dependencies
        # @Task build with LLVM
        run: cargo doc --profile ci --no-deps --features cranelift,lsp

  clippy:
    name: Run Clippy (on Linux)

    needs: build-on-linux
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly
        components: clippy
    - name: Run Clippy
      # @Task build with LLVM
      run: cargo clippy --profile ci --features cranelift,lsp

  formatting:
    name: Check Code Formatting

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly
        components: rustfmt
    - name: Run rustfmt in check mode
      run: cargo fmt --check
