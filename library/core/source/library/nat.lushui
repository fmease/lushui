;; Natural numbers and related functions.
module

use topmost.type.Type
use topmost.(option.Option bool.Bool text.Text)

@public @intrinsic
data Nat: Type

@public
use add as +

@public @intrinsic
add: Nat -> Nat -> Nat

@public
use subtract as -

@public @intrinsic
subtract: Nat -> Nat -> Option Nat

@public
use panicking-subtract as -?

;;; @Temporary
@public @intrinsic
panicking-subtract: Nat -> Nat -> Nat

@public
use multiply as *

@public @intrinsic
multiply: Nat -> Nat -> Nat

@public
use divide as /

@public @intrinsic
divide: Nat -> Nat -> Option Nat

@public
use equal as ==

@public @intrinsic
equal: Nat -> Nat -> Bool

;;; equal (n m: Nat): Bool =
;;;     case duple Nat Nat n m of
;;;         duple Nat Nat \n n => true
;;;         \_ => false

@public
use less as <

@public @intrinsic
less: Nat -> Nat -> Bool

@public
use less-equal as =<

@public @intrinsic
less-equal: Nat -> Nat -> Bool

@public
use greater as >

@public @intrinsic
greater: Nat -> Nat -> Bool

@public
use greater-equal as >=

@public @intrinsic
greater-equal: Nat -> Nat -> Bool

@public @intrinsic
display: Nat -> Text

use topmost.(bool ordering)

@public
compare (n: Nat) (m: Nat): ordering.Ordering =
    case equal n m of
        bool.true => ordering.equal
        bool.false => case less n m of
            bool.true => ordering.less
            bool.false => ordering.greater

;;; @public @intrinsic
;;; to-int: Nat -> topmost.int.Int
