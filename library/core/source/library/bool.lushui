;; The canonical Boolean type and related functions.
module

@public @known
data Bool of
    false
    true

@public
use Bool.(false, true)

@public
not (b: Bool): Bool =
    case b of
        false => true
        true => false

use topmost.unit.(Unit, Thunk, force)

;;; @Task uncomment once `@lazy` is implemented
;;; @public
;;; if 'A
;;;     (condition: Bool)
;;;     @lazy (consequent: Thunk A)
;;;     @lazy (alternate: Thunk A): A
;;;     =
;;;     case condition of
;;;         false => force 'A alternate
;;;         true => force 'A consequent

;;; ;;; @Question or `&&`?
;;; @public
;;; use and as &

;;; @Task uncomment once `@lazy` is implemented
;;; @public
;;; and (b: Bool) @lazy (c: Thunk Bool): Bool = if Bool b (! Bool c) false

;;; @public
;;; ;;; @Question or `||`?
;;; use or as |

;;; @Task uncomment once `@lazy` is implemented
;;; @public
;;; or (b: Bool) @lazy (c: Thunk Bool): Bool = if Bool b true (! Bool c)

