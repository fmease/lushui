;; Types and functions related to comparing and ordering.
module

@public
data Ordering of
    less
    equal
    greater

@public
use Ordering.(less, equal, greater)

@public
invert (o: Ordering): Ordering =
    case o of
        less => greater
        equal => equal
        greater => less

use topmost.unit.(unit, Unit, Thunk, force)
use topmost.int.Int

;;; @Task uncomment once `@lazy` is implemented
;;; @public
;;; then (o: Ordering) @lazy (p: Thunk Ordering): Ordering =
;;;     case o of
;;;         equal => force 'Ordering p
;;;         let o => o

@public
then_ (o: Ordering) (p: Ordering): Ordering =
    case o of
        equal => p
        let o => o

@public
to-int (o: Ordering): Int =
    case o of
        less => Int.-1
        equal => Int.0
        greater => Int.1

